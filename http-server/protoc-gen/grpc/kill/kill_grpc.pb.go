// Code generated by protoc-gen-go-grpc_service. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc_service v1.2.0
// - protoc             v4.24.4
// source: kill.proto

package kill

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc_service package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KillClient is the client API for Kill service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KillClient interface {
	Kill(ctx context.Context, in *KillReq, opts ...grpc.CallOption) (*KillResp, error)
}

type killClient struct {
	cc grpc.ClientConnInterface
}

func NewKillClient(cc grpc.ClientConnInterface) KillClient {
	return &killClient{cc}
}

func (c *killClient) Kill(ctx context.Context, in *KillReq, opts ...grpc.CallOption) (*KillResp, error) {
	out := new(KillResp)
	err := c.cc.Invoke(ctx, "/grpc_service.kill.Kill/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KillServer is the server API for Kill service.
// All implementations must embed UnimplementedKillServer
// for forward compatibility
type KillServer interface {
	Kill(context.Context, *KillReq) (*KillResp, error)
	mustEmbedUnimplementedKillServer()
}

// UnimplementedKillServer must be embedded to have forward compatible implementations.
type UnimplementedKillServer struct {
}

func (UnimplementedKillServer) Kill(context.Context, *KillReq) (*KillResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedKillServer) mustEmbedUnimplementedKillServer() {}

// UnsafeKillServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KillServer will
// result in compilation errors.
type UnsafeKillServer interface {
	mustEmbedUnimplementedKillServer()
}

func RegisterKillServer(s grpc.ServiceRegistrar, srv KillServer) {
	s.RegisterService(&Kill_ServiceDesc, srv)
}

func _Kill_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KillServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_service.kill.Kill/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KillServer).Kill(ctx, req.(*KillReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Kill_ServiceDesc is the grpc.ServiceDesc for Kill service.
// It's only intended for direct use with grpc_service.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kill_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_service.kill.Kill",
	HandlerType: (*KillServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Kill",
			Handler:    _Kill_Kill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kill.proto",
}
