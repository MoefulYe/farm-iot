// Code generated by ent, DO NOT EDIT.

package device

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/MoefulYe/farm-iot/database/postgres/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldID, id))
}

// BornAt applies equality check predicate on the "born_at" field. It's identical to BornAtEQ.
func BornAt(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldBornAt, v))
}

// Parent applies equality check predicate on the "parent" field. It's identical to ParentEQ.
func Parent(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldParent, v))
}

// HashedPasswd applies equality check predicate on the "hashed_passwd" field. It's identical to HashedPasswdEQ.
func HashedPasswd(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldHashedPasswd, v))
}

// DeadAt applies equality check predicate on the "dead_at" field. It's identical to DeadAtEQ.
func DeadAt(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldDeadAt, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldReason, v))
}

// BornAtEQ applies the EQ predicate on the "born_at" field.
func BornAtEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldBornAt, v))
}

// BornAtNEQ applies the NEQ predicate on the "born_at" field.
func BornAtNEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldBornAt, v))
}

// BornAtIn applies the In predicate on the "born_at" field.
func BornAtIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldBornAt, vs...))
}

// BornAtNotIn applies the NotIn predicate on the "born_at" field.
func BornAtNotIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldBornAt, vs...))
}

// BornAtGT applies the GT predicate on the "born_at" field.
func BornAtGT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldBornAt, v))
}

// BornAtGTE applies the GTE predicate on the "born_at" field.
func BornAtGTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldBornAt, v))
}

// BornAtLT applies the LT predicate on the "born_at" field.
func BornAtLT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldBornAt, v))
}

// BornAtLTE applies the LTE predicate on the "born_at" field.
func BornAtLTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldBornAt, v))
}

// ParentEQ applies the EQ predicate on the "parent" field.
func ParentEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldParent, v))
}

// ParentNEQ applies the NEQ predicate on the "parent" field.
func ParentNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldParent, v))
}

// ParentIn applies the In predicate on the "parent" field.
func ParentIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldParent, vs...))
}

// ParentNotIn applies the NotIn predicate on the "parent" field.
func ParentNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldParent, vs...))
}

// ParentGT applies the GT predicate on the "parent" field.
func ParentGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldParent, v))
}

// ParentGTE applies the GTE predicate on the "parent" field.
func ParentGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldParent, v))
}

// ParentLT applies the LT predicate on the "parent" field.
func ParentLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldParent, v))
}

// ParentLTE applies the LTE predicate on the "parent" field.
func ParentLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldParent, v))
}

// ParentContains applies the Contains predicate on the "parent" field.
func ParentContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldParent, v))
}

// ParentHasPrefix applies the HasPrefix predicate on the "parent" field.
func ParentHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldParent, v))
}

// ParentHasSuffix applies the HasSuffix predicate on the "parent" field.
func ParentHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldParent, v))
}

// ParentEqualFold applies the EqualFold predicate on the "parent" field.
func ParentEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldParent, v))
}

// ParentContainsFold applies the ContainsFold predicate on the "parent" field.
func ParentContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldParent, v))
}

// HashedPasswdEQ applies the EQ predicate on the "hashed_passwd" field.
func HashedPasswdEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldHashedPasswd, v))
}

// HashedPasswdNEQ applies the NEQ predicate on the "hashed_passwd" field.
func HashedPasswdNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldHashedPasswd, v))
}

// HashedPasswdIn applies the In predicate on the "hashed_passwd" field.
func HashedPasswdIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldHashedPasswd, vs...))
}

// HashedPasswdNotIn applies the NotIn predicate on the "hashed_passwd" field.
func HashedPasswdNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldHashedPasswd, vs...))
}

// HashedPasswdGT applies the GT predicate on the "hashed_passwd" field.
func HashedPasswdGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldHashedPasswd, v))
}

// HashedPasswdGTE applies the GTE predicate on the "hashed_passwd" field.
func HashedPasswdGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldHashedPasswd, v))
}

// HashedPasswdLT applies the LT predicate on the "hashed_passwd" field.
func HashedPasswdLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldHashedPasswd, v))
}

// HashedPasswdLTE applies the LTE predicate on the "hashed_passwd" field.
func HashedPasswdLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldHashedPasswd, v))
}

// HashedPasswdContains applies the Contains predicate on the "hashed_passwd" field.
func HashedPasswdContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldHashedPasswd, v))
}

// HashedPasswdHasPrefix applies the HasPrefix predicate on the "hashed_passwd" field.
func HashedPasswdHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldHashedPasswd, v))
}

// HashedPasswdHasSuffix applies the HasSuffix predicate on the "hashed_passwd" field.
func HashedPasswdHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldHashedPasswd, v))
}

// HashedPasswdEqualFold applies the EqualFold predicate on the "hashed_passwd" field.
func HashedPasswdEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldHashedPasswd, v))
}

// HashedPasswdContainsFold applies the ContainsFold predicate on the "hashed_passwd" field.
func HashedPasswdContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldHashedPasswd, v))
}

// DeadAtEQ applies the EQ predicate on the "dead_at" field.
func DeadAtEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldDeadAt, v))
}

// DeadAtNEQ applies the NEQ predicate on the "dead_at" field.
func DeadAtNEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldDeadAt, v))
}

// DeadAtIn applies the In predicate on the "dead_at" field.
func DeadAtIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldDeadAt, vs...))
}

// DeadAtNotIn applies the NotIn predicate on the "dead_at" field.
func DeadAtNotIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldDeadAt, vs...))
}

// DeadAtGT applies the GT predicate on the "dead_at" field.
func DeadAtGT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldDeadAt, v))
}

// DeadAtGTE applies the GTE predicate on the "dead_at" field.
func DeadAtGTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldDeadAt, v))
}

// DeadAtLT applies the LT predicate on the "dead_at" field.
func DeadAtLT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldDeadAt, v))
}

// DeadAtLTE applies the LTE predicate on the "dead_at" field.
func DeadAtLTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldDeadAt, v))
}

// DeadAtIsNil applies the IsNil predicate on the "dead_at" field.
func DeadAtIsNil() predicate.Device {
	return predicate.Device(sql.FieldIsNull(FieldDeadAt))
}

// DeadAtNotNil applies the NotNil predicate on the "dead_at" field.
func DeadAtNotNil() predicate.Device {
	return predicate.Device(sql.FieldNotNull(FieldDeadAt))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.Device {
	return predicate.Device(sql.FieldIsNull(FieldReason))
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.Device {
	return predicate.Device(sql.FieldNotNull(FieldReason))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldReason, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Device) predicate.Device {
	return predicate.Device(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Device) predicate.Device {
	return predicate.Device(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Device) predicate.Device {
	return predicate.Device(sql.NotPredicates(p))
}
