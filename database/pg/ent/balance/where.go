// Code generated by ent, DO NOT EDIT.

package balance

import (
	"pg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldID, id))
}

// When applies equality check predicate on the "when" field. It's identical to WhenEQ.
func When(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldWhen, v))
}

// In applies equality check predicate on the "in" field. It's identical to InEQ.
func In(v float64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldIn, v))
}

// Out applies equality check predicate on the "out" field. It's identical to OutEQ.
func Out(v float64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldOut, v))
}

// WhenEQ applies the EQ predicate on the "when" field.
func WhenEQ(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldWhen, v))
}

// WhenNEQ applies the NEQ predicate on the "when" field.
func WhenNEQ(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldWhen, v))
}

// WhenIn applies the In predicate on the "when" field.
func WhenIn(vs ...time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldWhen, vs...))
}

// WhenNotIn applies the NotIn predicate on the "when" field.
func WhenNotIn(vs ...time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldWhen, vs...))
}

// WhenGT applies the GT predicate on the "when" field.
func WhenGT(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldWhen, v))
}

// WhenGTE applies the GTE predicate on the "when" field.
func WhenGTE(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldWhen, v))
}

// WhenLT applies the LT predicate on the "when" field.
func WhenLT(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldWhen, v))
}

// WhenLTE applies the LTE predicate on the "when" field.
func WhenLTE(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldWhen, v))
}

// InEQ applies the EQ predicate on the "in" field.
func InEQ(v float64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldIn, v))
}

// InNEQ applies the NEQ predicate on the "in" field.
func InNEQ(v float64) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldIn, v))
}

// InIn applies the In predicate on the "in" field.
func InIn(vs ...float64) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldIn, vs...))
}

// InNotIn applies the NotIn predicate on the "in" field.
func InNotIn(vs ...float64) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldIn, vs...))
}

// InGT applies the GT predicate on the "in" field.
func InGT(v float64) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldIn, v))
}

// InGTE applies the GTE predicate on the "in" field.
func InGTE(v float64) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldIn, v))
}

// InLT applies the LT predicate on the "in" field.
func InLT(v float64) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldIn, v))
}

// InLTE applies the LTE predicate on the "in" field.
func InLTE(v float64) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldIn, v))
}

// OutEQ applies the EQ predicate on the "out" field.
func OutEQ(v float64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldOut, v))
}

// OutNEQ applies the NEQ predicate on the "out" field.
func OutNEQ(v float64) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldOut, v))
}

// OutIn applies the In predicate on the "out" field.
func OutIn(vs ...float64) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldOut, vs...))
}

// OutNotIn applies the NotIn predicate on the "out" field.
func OutNotIn(vs ...float64) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldOut, vs...))
}

// OutGT applies the GT predicate on the "out" field.
func OutGT(v float64) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldOut, v))
}

// OutGTE applies the GTE predicate on the "out" field.
func OutGTE(v float64) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldOut, v))
}

// OutLT applies the LT predicate on the "out" field.
func OutLT(v float64) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldOut, v))
}

// OutLTE applies the LTE predicate on the "out" field.
func OutLTE(v float64) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldOut, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Balance) predicate.Balance {
	return predicate.Balance(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Balance) predicate.Balance {
	return predicate.Balance(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Balance) predicate.Balance {
	return predicate.Balance(sql.NotPredicates(p))
}
