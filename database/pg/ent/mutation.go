// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pg/ent/balance"
	"pg/ent/device"
	"pg/ent/predicate"
	"pg/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBalance = "Balance"
	TypeDevice  = "Device"
	TypeUser    = "User"
)

// BalanceMutation represents an operation that mutates the Balance nodes in the graph.
type BalanceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	when          *time.Time
	in            *float64
	addin         *float64
	out           *float64
	addout        *float64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Balance, error)
	predicates    []predicate.Balance
}

var _ ent.Mutation = (*BalanceMutation)(nil)

// balanceOption allows management of the mutation configuration using functional options.
type balanceOption func(*BalanceMutation)

// newBalanceMutation creates new mutation for the Balance entity.
func newBalanceMutation(c config, op Op, opts ...balanceOption) *BalanceMutation {
	m := &BalanceMutation{
		config:        c,
		op:            op,
		typ:           TypeBalance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBalanceID sets the ID field of the mutation.
func withBalanceID(id int) balanceOption {
	return func(m *BalanceMutation) {
		var (
			err   error
			once  sync.Once
			value *Balance
		)
		m.oldValue = func(ctx context.Context) (*Balance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Balance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBalance sets the old Balance of the mutation.
func withBalance(node *Balance) balanceOption {
	return func(m *BalanceMutation) {
		m.oldValue = func(context.Context) (*Balance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BalanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BalanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BalanceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BalanceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Balance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWhen sets the "when" field.
func (m *BalanceMutation) SetWhen(t time.Time) {
	m.when = &t
}

// When returns the value of the "when" field in the mutation.
func (m *BalanceMutation) When() (r time.Time, exists bool) {
	v := m.when
	if v == nil {
		return
	}
	return *v, true
}

// OldWhen returns the old "when" field's value of the Balance entity.
// If the Balance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BalanceMutation) OldWhen(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhen is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhen: %w", err)
	}
	return oldValue.When, nil
}

// ResetWhen resets all changes to the "when" field.
func (m *BalanceMutation) ResetWhen() {
	m.when = nil
}

// SetIn sets the "in" field.
func (m *BalanceMutation) SetIn(f float64) {
	m.in = &f
	m.addin = nil
}

// In returns the value of the "in" field in the mutation.
func (m *BalanceMutation) In() (r float64, exists bool) {
	v := m.in
	if v == nil {
		return
	}
	return *v, true
}

// OldIn returns the old "in" field's value of the Balance entity.
// If the Balance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BalanceMutation) OldIn(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIn: %w", err)
	}
	return oldValue.In, nil
}

// AddIn adds f to the "in" field.
func (m *BalanceMutation) AddIn(f float64) {
	if m.addin != nil {
		*m.addin += f
	} else {
		m.addin = &f
	}
}

// AddedIn returns the value that was added to the "in" field in this mutation.
func (m *BalanceMutation) AddedIn() (r float64, exists bool) {
	v := m.addin
	if v == nil {
		return
	}
	return *v, true
}

// ResetIn resets all changes to the "in" field.
func (m *BalanceMutation) ResetIn() {
	m.in = nil
	m.addin = nil
}

// SetOut sets the "out" field.
func (m *BalanceMutation) SetOut(f float64) {
	m.out = &f
	m.addout = nil
}

// Out returns the value of the "out" field in the mutation.
func (m *BalanceMutation) Out() (r float64, exists bool) {
	v := m.out
	if v == nil {
		return
	}
	return *v, true
}

// OldOut returns the old "out" field's value of the Balance entity.
// If the Balance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BalanceMutation) OldOut(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOut is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOut requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOut: %w", err)
	}
	return oldValue.Out, nil
}

// AddOut adds f to the "out" field.
func (m *BalanceMutation) AddOut(f float64) {
	if m.addout != nil {
		*m.addout += f
	} else {
		m.addout = &f
	}
}

// AddedOut returns the value that was added to the "out" field in this mutation.
func (m *BalanceMutation) AddedOut() (r float64, exists bool) {
	v := m.addout
	if v == nil {
		return
	}
	return *v, true
}

// ResetOut resets all changes to the "out" field.
func (m *BalanceMutation) ResetOut() {
	m.out = nil
	m.addout = nil
}

// Where appends a list predicates to the BalanceMutation builder.
func (m *BalanceMutation) Where(ps ...predicate.Balance) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BalanceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BalanceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Balance, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BalanceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BalanceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Balance).
func (m *BalanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BalanceMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.when != nil {
		fields = append(fields, balance.FieldWhen)
	}
	if m.in != nil {
		fields = append(fields, balance.FieldIn)
	}
	if m.out != nil {
		fields = append(fields, balance.FieldOut)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BalanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case balance.FieldWhen:
		return m.When()
	case balance.FieldIn:
		return m.In()
	case balance.FieldOut:
		return m.Out()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BalanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case balance.FieldWhen:
		return m.OldWhen(ctx)
	case balance.FieldIn:
		return m.OldIn(ctx)
	case balance.FieldOut:
		return m.OldOut(ctx)
	}
	return nil, fmt.Errorf("unknown Balance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BalanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case balance.FieldWhen:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhen(v)
		return nil
	case balance.FieldIn:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIn(v)
		return nil
	case balance.FieldOut:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOut(v)
		return nil
	}
	return fmt.Errorf("unknown Balance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BalanceMutation) AddedFields() []string {
	var fields []string
	if m.addin != nil {
		fields = append(fields, balance.FieldIn)
	}
	if m.addout != nil {
		fields = append(fields, balance.FieldOut)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BalanceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case balance.FieldIn:
		return m.AddedIn()
	case balance.FieldOut:
		return m.AddedOut()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BalanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case balance.FieldIn:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIn(v)
		return nil
	case balance.FieldOut:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOut(v)
		return nil
	}
	return fmt.Errorf("unknown Balance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BalanceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BalanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BalanceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Balance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BalanceMutation) ResetField(name string) error {
	switch name {
	case balance.FieldWhen:
		m.ResetWhen()
		return nil
	case balance.FieldIn:
		m.ResetIn()
		return nil
	case balance.FieldOut:
		m.ResetOut()
		return nil
	}
	return fmt.Errorf("unknown Balance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BalanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BalanceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BalanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BalanceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BalanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BalanceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BalanceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Balance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BalanceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Balance edge %s", name)
}

// DeviceMutation represents an operation that mutates the Device nodes in the graph.
type DeviceMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	born_at         *time.Time
	hashed_passwd   *string
	dead_at         *time.Time
	reason          *string
	clearedFields   map[string]struct{}
	mother          *uuid.UUID
	clearedmother   bool
	children        map[uuid.UUID]struct{}
	removedchildren map[uuid.UUID]struct{}
	clearedchildren bool
	done            bool
	oldValue        func(context.Context) (*Device, error)
	predicates      []predicate.Device
}

var _ ent.Mutation = (*DeviceMutation)(nil)

// deviceOption allows management of the mutation configuration using functional options.
type deviceOption func(*DeviceMutation)

// newDeviceMutation creates new mutation for the Device entity.
func newDeviceMutation(c config, op Op, opts ...deviceOption) *DeviceMutation {
	m := &DeviceMutation{
		config:        c,
		op:            op,
		typ:           TypeDevice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeviceID sets the ID field of the mutation.
func withDeviceID(id uuid.UUID) deviceOption {
	return func(m *DeviceMutation) {
		var (
			err   error
			once  sync.Once
			value *Device
		)
		m.oldValue = func(ctx context.Context) (*Device, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Device.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDevice sets the old Device of the mutation.
func withDevice(node *Device) deviceOption {
	return func(m *DeviceMutation) {
		m.oldValue = func(context.Context) (*Device, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeviceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeviceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Device entities.
func (m *DeviceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeviceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeviceMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Device.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBornAt sets the "born_at" field.
func (m *DeviceMutation) SetBornAt(t time.Time) {
	m.born_at = &t
}

// BornAt returns the value of the "born_at" field in the mutation.
func (m *DeviceMutation) BornAt() (r time.Time, exists bool) {
	v := m.born_at
	if v == nil {
		return
	}
	return *v, true
}

// OldBornAt returns the old "born_at" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldBornAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBornAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBornAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBornAt: %w", err)
	}
	return oldValue.BornAt, nil
}

// ResetBornAt resets all changes to the "born_at" field.
func (m *DeviceMutation) ResetBornAt() {
	m.born_at = nil
}

// SetHashedPasswd sets the "hashed_passwd" field.
func (m *DeviceMutation) SetHashedPasswd(s string) {
	m.hashed_passwd = &s
}

// HashedPasswd returns the value of the "hashed_passwd" field in the mutation.
func (m *DeviceMutation) HashedPasswd() (r string, exists bool) {
	v := m.hashed_passwd
	if v == nil {
		return
	}
	return *v, true
}

// OldHashedPasswd returns the old "hashed_passwd" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldHashedPasswd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashedPasswd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashedPasswd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashedPasswd: %w", err)
	}
	return oldValue.HashedPasswd, nil
}

// ResetHashedPasswd resets all changes to the "hashed_passwd" field.
func (m *DeviceMutation) ResetHashedPasswd() {
	m.hashed_passwd = nil
}

// SetDeadAt sets the "dead_at" field.
func (m *DeviceMutation) SetDeadAt(t time.Time) {
	m.dead_at = &t
}

// DeadAt returns the value of the "dead_at" field in the mutation.
func (m *DeviceMutation) DeadAt() (r time.Time, exists bool) {
	v := m.dead_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeadAt returns the old "dead_at" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldDeadAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeadAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeadAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeadAt: %w", err)
	}
	return oldValue.DeadAt, nil
}

// ClearDeadAt clears the value of the "dead_at" field.
func (m *DeviceMutation) ClearDeadAt() {
	m.dead_at = nil
	m.clearedFields[device.FieldDeadAt] = struct{}{}
}

// DeadAtCleared returns if the "dead_at" field was cleared in this mutation.
func (m *DeviceMutation) DeadAtCleared() bool {
	_, ok := m.clearedFields[device.FieldDeadAt]
	return ok
}

// ResetDeadAt resets all changes to the "dead_at" field.
func (m *DeviceMutation) ResetDeadAt() {
	m.dead_at = nil
	delete(m.clearedFields, device.FieldDeadAt)
}

// SetReason sets the "reason" field.
func (m *DeviceMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *DeviceMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ClearReason clears the value of the "reason" field.
func (m *DeviceMutation) ClearReason() {
	m.reason = nil
	m.clearedFields[device.FieldReason] = struct{}{}
}

// ReasonCleared returns if the "reason" field was cleared in this mutation.
func (m *DeviceMutation) ReasonCleared() bool {
	_, ok := m.clearedFields[device.FieldReason]
	return ok
}

// ResetReason resets all changes to the "reason" field.
func (m *DeviceMutation) ResetReason() {
	m.reason = nil
	delete(m.clearedFields, device.FieldReason)
}

// SetParent sets the "parent" field.
func (m *DeviceMutation) SetParent(u uuid.UUID) {
	m.mother = &u
}

// Parent returns the value of the "parent" field in the mutation.
func (m *DeviceMutation) Parent() (r uuid.UUID, exists bool) {
	v := m.mother
	if v == nil {
		return
	}
	return *v, true
}

// OldParent returns the old "parent" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldParent(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParent: %w", err)
	}
	return oldValue.Parent, nil
}

// ClearParent clears the value of the "parent" field.
func (m *DeviceMutation) ClearParent() {
	m.mother = nil
	m.clearedFields[device.FieldParent] = struct{}{}
}

// ParentCleared returns if the "parent" field was cleared in this mutation.
func (m *DeviceMutation) ParentCleared() bool {
	_, ok := m.clearedFields[device.FieldParent]
	return ok
}

// ResetParent resets all changes to the "parent" field.
func (m *DeviceMutation) ResetParent() {
	m.mother = nil
	delete(m.clearedFields, device.FieldParent)
}

// SetMotherID sets the "mother" edge to the Device entity by id.
func (m *DeviceMutation) SetMotherID(id uuid.UUID) {
	m.mother = &id
}

// ClearMother clears the "mother" edge to the Device entity.
func (m *DeviceMutation) ClearMother() {
	m.clearedmother = true
	m.clearedFields[device.FieldParent] = struct{}{}
}

// MotherCleared reports if the "mother" edge to the Device entity was cleared.
func (m *DeviceMutation) MotherCleared() bool {
	return m.ParentCleared() || m.clearedmother
}

// MotherID returns the "mother" edge ID in the mutation.
func (m *DeviceMutation) MotherID() (id uuid.UUID, exists bool) {
	if m.mother != nil {
		return *m.mother, true
	}
	return
}

// MotherIDs returns the "mother" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MotherID instead. It exists only for internal usage by the builders.
func (m *DeviceMutation) MotherIDs() (ids []uuid.UUID) {
	if id := m.mother; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMother resets all changes to the "mother" edge.
func (m *DeviceMutation) ResetMother() {
	m.mother = nil
	m.clearedmother = false
}

// AddChildIDs adds the "children" edge to the Device entity by ids.
func (m *DeviceMutation) AddChildIDs(ids ...uuid.UUID) {
	if m.children == nil {
		m.children = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Device entity.
func (m *DeviceMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Device entity was cleared.
func (m *DeviceMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Device entity by IDs.
func (m *DeviceMutation) RemoveChildIDs(ids ...uuid.UUID) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Device entity.
func (m *DeviceMutation) RemovedChildrenIDs() (ids []uuid.UUID) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *DeviceMutation) ChildrenIDs() (ids []uuid.UUID) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *DeviceMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the DeviceMutation builder.
func (m *DeviceMutation) Where(ps ...predicate.Device) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DeviceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DeviceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Device, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DeviceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DeviceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Device).
func (m *DeviceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeviceMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.born_at != nil {
		fields = append(fields, device.FieldBornAt)
	}
	if m.hashed_passwd != nil {
		fields = append(fields, device.FieldHashedPasswd)
	}
	if m.dead_at != nil {
		fields = append(fields, device.FieldDeadAt)
	}
	if m.reason != nil {
		fields = append(fields, device.FieldReason)
	}
	if m.mother != nil {
		fields = append(fields, device.FieldParent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeviceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case device.FieldBornAt:
		return m.BornAt()
	case device.FieldHashedPasswd:
		return m.HashedPasswd()
	case device.FieldDeadAt:
		return m.DeadAt()
	case device.FieldReason:
		return m.Reason()
	case device.FieldParent:
		return m.Parent()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeviceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case device.FieldBornAt:
		return m.OldBornAt(ctx)
	case device.FieldHashedPasswd:
		return m.OldHashedPasswd(ctx)
	case device.FieldDeadAt:
		return m.OldDeadAt(ctx)
	case device.FieldReason:
		return m.OldReason(ctx)
	case device.FieldParent:
		return m.OldParent(ctx)
	}
	return nil, fmt.Errorf("unknown Device field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case device.FieldBornAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBornAt(v)
		return nil
	case device.FieldHashedPasswd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashedPasswd(v)
		return nil
	case device.FieldDeadAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeadAt(v)
		return nil
	case device.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case device.FieldParent:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParent(v)
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeviceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeviceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Device numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeviceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(device.FieldDeadAt) {
		fields = append(fields, device.FieldDeadAt)
	}
	if m.FieldCleared(device.FieldReason) {
		fields = append(fields, device.FieldReason)
	}
	if m.FieldCleared(device.FieldParent) {
		fields = append(fields, device.FieldParent)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeviceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeviceMutation) ClearField(name string) error {
	switch name {
	case device.FieldDeadAt:
		m.ClearDeadAt()
		return nil
	case device.FieldReason:
		m.ClearReason()
		return nil
	case device.FieldParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Device nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeviceMutation) ResetField(name string) error {
	switch name {
	case device.FieldBornAt:
		m.ResetBornAt()
		return nil
	case device.FieldHashedPasswd:
		m.ResetHashedPasswd()
		return nil
	case device.FieldDeadAt:
		m.ResetDeadAt()
		return nil
	case device.FieldReason:
		m.ResetReason()
		return nil
	case device.FieldParent:
		m.ResetParent()
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeviceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.mother != nil {
		edges = append(edges, device.EdgeMother)
	}
	if m.children != nil {
		edges = append(edges, device.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeviceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case device.EdgeMother:
		if id := m.mother; id != nil {
			return []ent.Value{*id}
		}
	case device.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeviceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, device.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeviceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case device.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeviceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmother {
		edges = append(edges, device.EdgeMother)
	}
	if m.clearedchildren {
		edges = append(edges, device.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeviceMutation) EdgeCleared(name string) bool {
	switch name {
	case device.EdgeMother:
		return m.clearedmother
	case device.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeviceMutation) ClearEdge(name string) error {
	switch name {
	case device.EdgeMother:
		m.ClearMother()
		return nil
	}
	return fmt.Errorf("unknown Device unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeviceMutation) ResetEdge(name string) error {
	switch name {
	case device.EdgeMother:
		m.ResetMother()
		return nil
	case device.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown Device edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	passwd        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPasswd sets the "passwd" field.
func (m *UserMutation) SetPasswd(s string) {
	m.passwd = &s
}

// Passwd returns the value of the "passwd" field in the mutation.
func (m *UserMutation) Passwd() (r string, exists bool) {
	v := m.passwd
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswd returns the old "passwd" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswd: %w", err)
	}
	return oldValue.Passwd, nil
}

// ResetPasswd resets all changes to the "passwd" field.
func (m *UserMutation) ResetPasswd() {
	m.passwd = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.passwd != nil {
		fields = append(fields, user.FieldPasswd)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPasswd:
		return m.Passwd()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPasswd:
		return m.OldPasswd(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPasswd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswd(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPasswd:
		m.ResetPasswd()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
