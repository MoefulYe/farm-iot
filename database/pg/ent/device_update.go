// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pg/ent/device"
	"pg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DeviceUpdate is the builder for updating Device entities.
type DeviceUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceMutation
}

// Where appends a list predicates to the DeviceUpdate builder.
func (du *DeviceUpdate) Where(ps ...predicate.Device) *DeviceUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetHashedPasswd sets the "hashed_passwd" field.
func (du *DeviceUpdate) SetHashedPasswd(s string) *DeviceUpdate {
	du.mutation.SetHashedPasswd(s)
	return du
}

// SetDeadAt sets the "dead_at" field.
func (du *DeviceUpdate) SetDeadAt(t time.Time) *DeviceUpdate {
	du.mutation.SetDeadAt(t)
	return du
}

// SetNillableDeadAt sets the "dead_at" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableDeadAt(t *time.Time) *DeviceUpdate {
	if t != nil {
		du.SetDeadAt(*t)
	}
	return du
}

// ClearDeadAt clears the value of the "dead_at" field.
func (du *DeviceUpdate) ClearDeadAt() *DeviceUpdate {
	du.mutation.ClearDeadAt()
	return du
}

// SetReason sets the "reason" field.
func (du *DeviceUpdate) SetReason(s string) *DeviceUpdate {
	du.mutation.SetReason(s)
	return du
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableReason(s *string) *DeviceUpdate {
	if s != nil {
		du.SetReason(*s)
	}
	return du
}

// ClearReason clears the value of the "reason" field.
func (du *DeviceUpdate) ClearReason() *DeviceUpdate {
	du.mutation.ClearReason()
	return du
}

// SetParentID sets the "parent" edge to the Device entity by ID.
func (du *DeviceUpdate) SetParentID(id uuid.UUID) *DeviceUpdate {
	du.mutation.SetParentID(id)
	return du
}

// SetNillableParentID sets the "parent" edge to the Device entity by ID if the given value is not nil.
func (du *DeviceUpdate) SetNillableParentID(id *uuid.UUID) *DeviceUpdate {
	if id != nil {
		du = du.SetParentID(*id)
	}
	return du
}

// SetParent sets the "parent" edge to the Device entity.
func (du *DeviceUpdate) SetParent(d *Device) *DeviceUpdate {
	return du.SetParentID(d.ID)
}

// AddChildIDs adds the "children" edge to the Device entity by IDs.
func (du *DeviceUpdate) AddChildIDs(ids ...uuid.UUID) *DeviceUpdate {
	du.mutation.AddChildIDs(ids...)
	return du
}

// AddChildren adds the "children" edges to the Device entity.
func (du *DeviceUpdate) AddChildren(d ...*Device) *DeviceUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddChildIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (du *DeviceUpdate) Mutation() *DeviceMutation {
	return du.mutation
}

// ClearParent clears the "parent" edge to the Device entity.
func (du *DeviceUpdate) ClearParent() *DeviceUpdate {
	du.mutation.ClearParent()
	return du
}

// ClearChildren clears all "children" edges to the Device entity.
func (du *DeviceUpdate) ClearChildren() *DeviceUpdate {
	du.mutation.ClearChildren()
	return du
}

// RemoveChildIDs removes the "children" edge to Device entities by IDs.
func (du *DeviceUpdate) RemoveChildIDs(ids ...uuid.UUID) *DeviceUpdate {
	du.mutation.RemoveChildIDs(ids...)
	return du
}

// RemoveChildren removes "children" edges to Device entities.
func (du *DeviceUpdate) RemoveChildren(d ...*Device) *DeviceUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeviceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeviceUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeviceUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeUUID))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.HashedPasswd(); ok {
		_spec.SetField(device.FieldHashedPasswd, field.TypeString, value)
	}
	if value, ok := du.mutation.DeadAt(); ok {
		_spec.SetField(device.FieldDeadAt, field.TypeTime, value)
	}
	if du.mutation.DeadAtCleared() {
		_spec.ClearField(device.FieldDeadAt, field.TypeTime)
	}
	if value, ok := du.mutation.Reason(); ok {
		_spec.SetField(device.FieldReason, field.TypeString, value)
	}
	if du.mutation.ReasonCleared() {
		_spec.ClearField(device.FieldReason, field.TypeString)
	}
	if du.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.ParentTable,
			Columns: []string{device.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.ParentTable,
			Columns: []string{device.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.ChildrenTable,
			Columns: []string{device.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !du.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.ChildrenTable,
			Columns: []string{device.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.ChildrenTable,
			Columns: []string{device.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DeviceUpdateOne is the builder for updating a single Device entity.
type DeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceMutation
}

// SetHashedPasswd sets the "hashed_passwd" field.
func (duo *DeviceUpdateOne) SetHashedPasswd(s string) *DeviceUpdateOne {
	duo.mutation.SetHashedPasswd(s)
	return duo
}

// SetDeadAt sets the "dead_at" field.
func (duo *DeviceUpdateOne) SetDeadAt(t time.Time) *DeviceUpdateOne {
	duo.mutation.SetDeadAt(t)
	return duo
}

// SetNillableDeadAt sets the "dead_at" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableDeadAt(t *time.Time) *DeviceUpdateOne {
	if t != nil {
		duo.SetDeadAt(*t)
	}
	return duo
}

// ClearDeadAt clears the value of the "dead_at" field.
func (duo *DeviceUpdateOne) ClearDeadAt() *DeviceUpdateOne {
	duo.mutation.ClearDeadAt()
	return duo
}

// SetReason sets the "reason" field.
func (duo *DeviceUpdateOne) SetReason(s string) *DeviceUpdateOne {
	duo.mutation.SetReason(s)
	return duo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableReason(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetReason(*s)
	}
	return duo
}

// ClearReason clears the value of the "reason" field.
func (duo *DeviceUpdateOne) ClearReason() *DeviceUpdateOne {
	duo.mutation.ClearReason()
	return duo
}

// SetParentID sets the "parent" edge to the Device entity by ID.
func (duo *DeviceUpdateOne) SetParentID(id uuid.UUID) *DeviceUpdateOne {
	duo.mutation.SetParentID(id)
	return duo
}

// SetNillableParentID sets the "parent" edge to the Device entity by ID if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableParentID(id *uuid.UUID) *DeviceUpdateOne {
	if id != nil {
		duo = duo.SetParentID(*id)
	}
	return duo
}

// SetParent sets the "parent" edge to the Device entity.
func (duo *DeviceUpdateOne) SetParent(d *Device) *DeviceUpdateOne {
	return duo.SetParentID(d.ID)
}

// AddChildIDs adds the "children" edge to the Device entity by IDs.
func (duo *DeviceUpdateOne) AddChildIDs(ids ...uuid.UUID) *DeviceUpdateOne {
	duo.mutation.AddChildIDs(ids...)
	return duo
}

// AddChildren adds the "children" edges to the Device entity.
func (duo *DeviceUpdateOne) AddChildren(d ...*Device) *DeviceUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddChildIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (duo *DeviceUpdateOne) Mutation() *DeviceMutation {
	return duo.mutation
}

// ClearParent clears the "parent" edge to the Device entity.
func (duo *DeviceUpdateOne) ClearParent() *DeviceUpdateOne {
	duo.mutation.ClearParent()
	return duo
}

// ClearChildren clears all "children" edges to the Device entity.
func (duo *DeviceUpdateOne) ClearChildren() *DeviceUpdateOne {
	duo.mutation.ClearChildren()
	return duo
}

// RemoveChildIDs removes the "children" edge to Device entities by IDs.
func (duo *DeviceUpdateOne) RemoveChildIDs(ids ...uuid.UUID) *DeviceUpdateOne {
	duo.mutation.RemoveChildIDs(ids...)
	return duo
}

// RemoveChildren removes "children" edges to Device entities.
func (duo *DeviceUpdateOne) RemoveChildren(d ...*Device) *DeviceUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the DeviceUpdate builder.
func (duo *DeviceUpdateOne) Where(ps ...predicate.Device) *DeviceUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeviceUpdateOne) Select(field string, fields ...string) *DeviceUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Device entity.
func (duo *DeviceUpdateOne) Save(ctx context.Context) (*Device, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeviceUpdateOne) SaveX(ctx context.Context) *Device {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeviceUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DeviceUpdateOne) sqlSave(ctx context.Context) (_node *Device, err error) {
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeUUID))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Device.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, device.FieldID)
		for _, f := range fields {
			if !device.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != device.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.HashedPasswd(); ok {
		_spec.SetField(device.FieldHashedPasswd, field.TypeString, value)
	}
	if value, ok := duo.mutation.DeadAt(); ok {
		_spec.SetField(device.FieldDeadAt, field.TypeTime, value)
	}
	if duo.mutation.DeadAtCleared() {
		_spec.ClearField(device.FieldDeadAt, field.TypeTime)
	}
	if value, ok := duo.mutation.Reason(); ok {
		_spec.SetField(device.FieldReason, field.TypeString, value)
	}
	if duo.mutation.ReasonCleared() {
		_spec.ClearField(device.FieldReason, field.TypeString)
	}
	if duo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.ParentTable,
			Columns: []string{device.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.ParentTable,
			Columns: []string{device.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.ChildrenTable,
			Columns: []string{device.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !duo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.ChildrenTable,
			Columns: []string{device.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.ChildrenTable,
			Columns: []string{device.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Device{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
